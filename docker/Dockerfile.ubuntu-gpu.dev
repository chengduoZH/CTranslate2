ARG UBUNTU_VERSION=18.04
ARG CUDA_VERSION=10.0
FROM nvidia/cuda:${CUDA_VERSION}-cudnn7-devel-ubuntu${UBUNTU_VERSION} as builder

ENV TENSORRT_MAJOR_VERSION=6
ENV TENSORRT_VERSION=${TENSORRT_MAJOR_VERSION}.0.1

RUN export CUDA_SHORT_VERSION=`echo $CUDA_VERSION | cut -d'.' -f 1,2` && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-transport-https \
        build-essential \
        ca-certificates \
        gnupg2 \
        libnvinfer${TENSORRT_MAJOR_VERSION}=${TENSORRT_VERSION}-1+cuda${CUDA_SHORT_VERSION} \
        libnvinfer-dev=${TENSORRT_VERSION}-1+cuda${CUDA_SHORT_VERSION} \
        wget curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /root

ENV PATH=${PATH}:/opt/miniconda3/bin CONDA_PREFIX=/opt/miniconda3
RUN curl -LO http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    bash Miniconda3-latest-Linux-x86_64.sh -p /opt/miniconda3 -b && \
    rm Miniconda3-latest-Linux-x86_64.sh && \
    conda update -y conda && \
    conda install curl conda-verify conda-build mkl-include cmake -c anaconda && \
    conda clean -afy
RUN pip --no-cache-dir install contexttimer future transformers docopt pybind11==2.4.3

ENV MKL_VERSION=2020
ENV MKL_UPDATE=0
ENV MKL_BUILD=088
RUN wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-*.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-*.PUB && \
    echo "deb https://apt.repos.intel.com/mkl all main" > /etc/apt/sources.list.d/intel-mkl.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        intel-mkl-64bit-$MKL_VERSION.$MKL_UPDATE-$MKL_BUILD && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV DNNL_VERSION=1.5.0
ENV DNNL_TAG=v1.5
ENV DNNL_DIR=/root/dnnl
RUN wget https://github.com/oneapi-src/oneDNN/releases/download/${DNNL_TAG}/dnnl_lnx_${DNNL_VERSION}_cpu_gomp.tgz && \
    tar xf dnnl*.tgz && \
    rm dnnl*.tgz && \
    mv dnnl* ${DNNL_DIR}

WORKDIR /root/ctranslate2-dev

COPY third_party third_party
COPY cli cli
COPY include include
COPY src src
COPY CMakeLists.txt .

ARG CXX_FLAGS
ENV CXX_FLAGS=${CXX_FLAGS}
ARG CUDA_NVCC_FLAGS
ENV CUDA_NVCC_FLAGS=${CUDA_NVCC_FLAGS:-"-Xfatbin -compress-all"}
ARG CUDA_ARCH_LIST
ENV CUDA_ARCH_LIST=${CUDA_ARCH_LIST:-"Common"}
ENV CTRANSLATE2_ROOT=/root/ctranslate2

RUN mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=${CTRANSLATE2_ROOT} \
          -DCMAKE_PREFIX_PATH=${DNNL_DIR} -DWITH_DNNL=ON -DOPENMP_RUNTIME=COMP \
          -DWITH_CUDA=ON \
          -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" \
          -DCUDA_NVCC_FLAGS="${CUDA_NVCC_FLAGS}" -DCUDA_ARCH_LIST="${CUDA_ARCH_LIST}" .. && \
    VERBOSE=1 make -j4 && \
    make install

ENV LANG=en_US.UTF-8
COPY README.md .
COPY python python

WORKDIR /root/ctranslate2-dev/python
RUN python3 setup.py bdist_wheel && \
    rm -r build && \
    rm get-pip.py && \
    python3 -m pip freeze | grep pybind11 > /root/ctranslate2/install_requirements.txt && \
    python3 setup.py sdist && \
    mv dist/* /root/ctranslate2 && \
    rmdir dist

WORKDIR /root
RUN cp -P ${DNNL_DIR}/lib/*.so* /root/ctranslate2/lib && \
    cp -P $([ $CUDA_VERSION = "10.0.130" ] \
        && echo /usr/local/cuda/lib64/libcublas.so* \
        || echo /usr/lib/x86_64-linux-gnu/libcublas*.so*) \
        /root/ctranslate2/lib && \
    cp -P /usr/lib/x86_64-linux-gnu/libcudnn.so* /root/ctranslate2/lib && \
    cp -P /usr/lib/x86_64-linux-gnu/libnvinfer.so* /root/ctranslate2/lib
